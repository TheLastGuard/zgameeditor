<?xml version="1.0" encoding="iso-8859-1" ?>
<ZApplication Name="App" Caption="ZGameEditor application" FileVersion="2">
  <OnLoaded>
    <ZExternalLibrary Name="Z80Lib">
      <Source>
<![CDATA[//Predefined support routines generated from ZGE

void emit(string s) { }

//push argument on stack to be used by "emit"
void push(int value) { }

void pushString(string value) { }

int getResourceAddress(Component c) { }]]>
      </Source>
    </ZExternalLibrary>
    <ZLibrary>
      <Source>
<![CDATA[/*
  All routines needs to be declared "inline".

  To write asm-code to use with "emit"-statement, try this online assembler:
    https://www.asm80.com/

  Full ZX Spectrum ROM disassembly:
    http://primrosebank.net/computers/zxspectrum/docs/CompleteSpectrumROMDisassemblyThe.pdf
*/

byte[32] CharArray;

//write byte
inline void poke(int addr,int value) {
  push(addr);
  push(value);
  emit("c1e17977"); //pop bc, pop hl, ld a,c, ld (hl),a
}

//write word
inline void pokew(int addr,int value) {
  push(addr);
  push(value);
  emit("c1e1712370"); //pop bc, pop hl, ld (hl),c, inc hl, ld (hl),b
}

//read byte
inline int peek(int addr) {
  push(addr);
  emit("e14e0600c5"); //pop hl, ld c,(hl), ld b,0, push bc
}

//read word
inline int peekw(int addr) {
  push(addr);
  emit("e14e2346c5"); //pop hl, ld c,(hl), inc hl, ld b,(hl), push bc
}

inline void print(string s) {
  pushString(s);
  push(length(s));
  emit("c1d1cd3c20"); //pop bc, pop de, call 203c
}

inline void writeport(int port,byte value) {
  push(port);
  push(value);
  emit("e1c145ed41");  //pop hl, pop bc, ld b,l, out (c),b
}

inline void setBorderColor(int value) {
  writeport(254,value);
}

inline void waitVsync () {
  emit("fb76"); //ei, halt
}

inline void printChar(int value) {
  push(value);
  emit("c179d7"); //pop bc, ld a,c, rst 16
}

inline void setPaperColor(int value) {
  printChar(0x11);
  printChar(value);
}

inline void setInkColor(int value) {
  printChar(0x10);
  printChar(value);
}

inline int readport(int port) {
  push(port);
  emit("c1ed48c5"); //pop bc, in c,(c), push bc
}

inline void gotoxy(int x,int y) {
  push(x);
  push(y);
  emit("3e16d7");  //ld a,22 rst 16
  emit("e17dd7");  //pop hl, ld a,l, rst 16
  emit("e17dd7");  //pop hl, ld a,l, rst 16
}

inline int getPixelAddress(int x,int y) {
  push(y);
  push(x);
  emit("c1e145cdaa22e5"); //pop bc, pop hl, ld b,l, call 22aa, push hl
}

inline void memset(int dest, int value, int count) {
/*
pop bc
pop hl
pop de
ld a,l
ld (de),a
ld hl,de
inc de
ldir
*/
  push(dest);
  push(value);
  push(count);
  emit("c1e1d17d12626b13edb0");
}

inline void printHex(int value) {
  for(int i=12; i>=0; i-=4) {
    int digit=(value>>i)&15;
    if(digit<10)
      printChar(48 + digit);
    else
      printChar(65-10 + digit);
  }
}]]>
      </Source>
    </ZLibrary>
    <ZExpression>
      <Expression>
<![CDATA[/*
  Whole Z80 program needs to be defined in a single ZExpression located in OnLoaded.

  Only "int" type is supported and treated like a 16 bit unsigned number.

  Constant string values is supported only for "print" and "emit" functions.

  Build using "Project - Build Z80 file"

  The resulting Z80 file can be opened in ZX Spectrum emulators such as https://github.com/chernandezba/zesarux/releases
*/

/*for(int i=0; i<10; i++) {
  if(i<5)
    printChar(65);
  if(i>5)
    printChar(66);
}
return;*/

for(int i=0; i<32; i++)
  CharArray[i]=48+i;

//Custom font, ripped from Boggit using this technique https://markhardisty.wordpress.com/2018/01/23/how-to-rip-a-zx-spectrum-games-font/
pokew(23606, getResourceAddress(FontFile) );

//remove two fixed lines at the bottom
poke(23659,0);

//setPaperColor(47);
gotoxy(2,2);
print("ZGAMEEDITOR FOR ZX SPECTRUM");

gotoxy(0,4);
print("PRESS 1 AND 2 TO MOVE CHARACTER");

int spritex=32;
int sabreSpriteX=0;
int frame=0;
int bordercolor=0;

//Set up colors
int attraddress=16384+6144;
memset(attraddress,2,768/3); attraddress+=768/3;
memset(attraddress,7,768/3); attraddress+=768/3;
memset(attraddress,5,768/3);

int rot=1;
while(1) {
  waitVsync();
  frame++;

//  gotoxy(0,0);
//  printHex(frame);
//  printHex(0xAB12);

  pokew(16384+32,rot);
  if((frame&7)==0)
    rot<<=1;
//    rot=rot|1;
//  int key=readport(32766);
//  poke(16384,key);


  {
    //Sprite data, converted using c:\temp\ffmpeg -i test.png -pix_fmt monow -f rawvideo out.raw
    int sprite=getResourceAddress(NodesBitmap);
    int animframe=spritex & 7;
    for(int i=0; i <animframe; i++)
      sprite += (4*32);
    for(int i=0; i<32; i++) {
      int screen=getPixelAddress(spritex,45-i);

      poke(screen-1,0);
      pokew(screen, peekw(sprite)  ); screen+=2; sprite+=2;
      pokew(screen, peekw(sprite)  ); sprite+=2;
    }
  }

  {
    //sabreman
    int sprite=getResourceAddress(SabreBitmap);
    if((sabreSpriteX&7) != 0)
      sprite += 48;
    for(int i=0; i<24; i++) {
      int screen=getPixelAddress(sabreSpriteX,100-i);
      poke(screen-1,0);
      pokew(screen, peekw(sprite)  );
      sprite+=2;
    }
    if((frame&15)==0) {
      sabreSpriteX+=4;
      if(sabreSpriteX==200) {
        //wrap around, and erase video mem so there is no leftover at right edge
        sabreSpriteX=0;
        memset(16384 + 2048,0,2048);
      }
    }
  }

  //Characters from chararray
  if ((frame&7)==0){
    int char=(frame>>3)&31;
    gotoxy(char,22);
    CharArray[char]=CharArray[char]+1;
    if(CharArray[char]==91)
      CharArray[char]=48;
    printChar( CharArray[char] );
  }

  //Controls
  int key=readport(0xf7fe);
  if((key & 2)==0) {
     if(spritex<256-24)
       spritex++;
  } else if((key & 1)==0) {
     if(spritex!=0)
       spritex--;
  }

  if((frame&15)==0)
    setBorderColor(bordercolor++);
}]]>
      </Expression>
    </ZExpression>
    <ZExpression>
      <Expression>
<![CDATA[//int x=0;
//if(x>10);
//testarray[0]=1;]]>
      </Expression>
    </ZExpression>
  </OnLoaded>
  <Content>
    <File Name="FontFile" Comment="Font from &quot;The Boggit&quot;">
      <FileEmbedded>
<![CDATA[789C5D515B6B1341143EEDCA3A90250494B26048FB10FBD007595D0841D6DD3C59E98B17A40F45C2E2844D213156571B1FE28C8A17C4BB82F74B55FA60DA426244DB58F357F20B2AF901938E6736298ADFCE9ED96FBE33E7CC37DBFBDA586BF6DA5FDACD5E6763A5DD5BEDB4EABD6663E587586EAF35C4F2F7D6A6586DFCECF67FD5D7D7FB1BF5CD6FFD4EABD5DD5EEA76BB12148410236214A3D0C5F8F11327CFCC8A58EC2052220E89B1B42814E994E7093175E0984A2A1482C3C214567C2F92492166C43F9818CE9E0ABB8938BB2D65E5A29497E47F58FA78FD86BC79EBF690DEC5F79EBCFFE0A17CF4F889DC7AF65B3E7FF152099F067A75F172EDCE55FE5A5E7BFAE6AD94EFE4FB0F6AF9F3C08182A58031531E2EA4591A07B8A579375672C9855305B267FFB4E2CE3C72C330A334C38C60984604134CE6B04822C4256450CB342D8CAEFBB71968BA615A7E0E92194A692609D9A80C0327500207AEE9E31A75418F8F4D1EE5BACE7DDF551C454671E634AA002E12C531784A57CDD418CE964A320D1D39C3075B2319ECD35251A233339BCF39EA1C9CD200F255CA68350F29DBF77D3B05B500CF17D4C00B7DE6871EF6F56BA8E07EFF3C2D1E0154794829B0393CFE1C034FD734E58706E55AA5486101937DCA6191974A25AC5FF16C4438BAE39BD936B3AC2BD13D9CCBEC1B4173AC1C50553FF22B5FA97B7120B4317FD08F56DD24A114EBF10C28E256A9D223FF7C3A9ECC861C204E1071749C9B48905D000B09C40240227B1A3F76FE84FC03568E1F24]]>
      </FileEmbedded>
    </File>
    <Bitmap Name="SabreBitmap" Comment="From &quot;Sabre Wulf&quot;" Width="16" Height="48">
      <Producers>
        <BitmapFromFile Comment="Imported from sabre.png" Transparency="2" HasAlphaLayer="1" DataWidth="16" DataHeight="48">
          <BitmapFile>
<![CDATA[789CD552410EC03008EAFF9FD98F6CD7C620056B93AD89A70A2A30C678C6C72BBE13FCC9FC3FDCBEF6A0A7E21146E188FFAE6E71BEEBE12DBC727F9C817670FCEBCE8E7A7FA69BCA837A982E4A862B1A321E27032E4F8667BC8E0F55FFE79C6DD9BA514C6F4573D4179F92B96A0FF25BDD9D7154F2AADECD6628B3B3F9AEEF2B1E69EAE8E76467A7B7A37F4755FDCBEE5679504FD4658767FB381970BC5732A86AC8F2E068E8E44FF1BF2B5BA85E582C7F70]]>
          </BitmapFile>
        </BitmapFromFile>
      </Producers>
    </Bitmap>
    <Bitmap Name="NodesBitmap" Comment="From &quot;Nodes of Yesod&quot;" Width="32" Height="256">
      <Producers>
        <BitmapFromFile Comment="Imported from nodes1.png" Transparency="2" HasAlphaLayer="1" DataWidth="32" DataHeight="256">
          <BitmapFile>

          </BitmapFile>
        </BitmapFromFile>
      </Producers>
    </Bitmap>
  </Content>
</ZApplication>
